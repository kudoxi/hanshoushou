#__author__:baobao
#date:2018/3/26

'''
二进制
--------->ASCII:只能存英文和拉丁字符，一个字符占一个字节，8位
--------------->中国（1980） GB2312:只能6700个中文
--------------->中国（1995） GBk1.0:2万个中文
--------------->中国（2000） GB18030:2万7千个中文
--------------->其他国家


--------------->万国码（unicode）
--------------------->最初表现形式 utf-32 一个字符占4个字节
--------------------->发展成 utf-16 大多数一个字符占2个字节,或2个以上
--------------------->utf-8 一个英文用ASCII码来存，一个英文一个字节，一个中文3个字节

各国语言(包括utf系列)通过dencode成unicode，unicode编码encode成目标国语言



在python2里，默认是ASCII码，所以用中文要在头部申明用utf-8
#-*- coding:utf-8 -*-
如果终端出现乱码，说明终端是用GBK，无法识别utf-8,可以用
#-*- coding:gbk -*-
或者
在输出中文的地方对中文进行解码
s = '我是攻'
s2 = s.decode("utf-8")#解码成unicode之前，要告诉decode方法，之前的编码方式，不然decode方法会认为之前的编码是ASCII码
s3 = s.decode("utf-8").encode("gbk")#这一步不必要，上一步解码成Unicode，unicode可以向下兼容所有国家语言编码，已经可以读出真实字符

在python3里，默认是unicode（系统，不可修改）,文件编码默认utf-8（可修改）
'''
s = '我是攻'
s_to_gbk = s.encode("gbk")
print(s)
print(s_to_gbk)#b'\xce\xd2\xca\xc7\xb9\xa5'
#b = byte = 字节类型 = 0-255之间纯数字的数据类型
#在python3里，encode方法会在编码的同时，会把所有字符转成ASCII码，和python2不一样

